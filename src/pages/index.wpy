<template>
  <view class="container">
    <view class="header">
      <image class="bg" src="{{ header.bg_avatar }}"></image>
      <view class="level-2">
        <view class="fs14">
          <text>{{ header.position_1_human_name }}</text>
        </view>
        <view class="fs21 today-expend">{{ header.position_1_amount }}</view>
        <view class="overflow-hide">
          <view class="pull-left fs14"  @tap="gotoChallenge">{{ header.position_2_human_name }} {{ header.position_2_amount }}</view>
          <view class="pull-right fs14">{{ header.position_3_human_name }} {{ header.position_3_amount }}</view>
        </view>
      </view>
      
      <i-notice-bar icon="systemprompt" wx:if="{{ header.show_notice_bar }}">
        <navigator wx:if="{{ header.notice_bar_path }}" url="{{ header.notice_bar_path }}">
          <text>{{ header.notice_text }}</text>
        </navigator>
        <text wx:else>{{ header.notice_text }}</text>
      </i-notice-bar>
    </view>
    
<!--     <view class="zan-btns new-record">
      <navigator url="/pages/statements/create">
        <button class="zan-btn jz-btn btn-shadow">记一笔</button>
      </navigator>
    </view> -->

 

    <view class="statement-list" wx-if="{{ list.length > 0 }}">
      <repeat for="{{ list }}" key="index" index="index" item="item">
        <StatementItem :statement.sync="item"></StatementItem>
      </repeat>
    </view>
    
    <view wx:if="{{ list.length == 0 }}">
      <empty :title.sync="emptyTitle"></empty>
    </view>
  </view>

     <view class="coupons-float" @tap="gotoCreate">
      <image src="../public/images/edit.png"></image>
    </view>

</template>

<script>
  import wepy from 'wepy'
  import wxRequest from '@/utils/wxRequest'
  import Session from '@/utils/session'
  import Empty from '@/components/empty'
  import StatementItem from '@/components/index/statement'
  import { getStore } from 'wepy-redux'
  import { asyncList } from '@/store/actions'
  import Tip from '@/utils/tip'
  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: '首页',
      "usingComponents": {
        "i-notice-bar": "../public/iview/notice-bar/index"
      }
    }

    data = {
      emptyTitle: '本周还没有开始记账哦~',
      orderEmptyTitle: '无预购清单，点击下方添加一笔吧',
     
      list: [ {id: '1', description: '今天很能花', category: '吃喝', asset: '招商银行', timeStr:'06-24', money: '10.0'},
             {id: '1', description: '雪顶咖啡', category: '吃喝', asset: '招商银行', timeStr:'06-24', money: '10.0'}  ],
      header: {position_1_human_name: "总支出", position_1_amount: "998", position_2_human_name: "挑战组1-挑战金额", position_2_amount: "1000", position_3_human_name:"挑战预算结余", position_3_amount: "2" }
    }

    components = {
      empty: Empty,
      orderEmpty: Empty,
      StatementItem
		}

    onShow () {
      this.getHeader()
      this.getList()
    }

    methods = {
      gotoCreate () {
        wx.navigateTo({ url: "/pages/statements/create" })
      },
      gotoChallenge () {
        wx.navigateTo({ url: "/pages/asset" })
      }
    }

    async getHeader () {
      if (Session.get('header_load_cache')) {
        this.header = Session.get('header_load_cache')
        this.$apply()
      }

      const data = await wxRequest.Get('header')
      if (data === undefined) {
        return false
      }

      this.header = data
      Session.set('header_load_cache', this.header)
      this.$apply()
    }

    async getList() {
      if (Session.get('index_load_cache')) {
        this.list = Session.get('index_load_cache')
        this.$apply()
      }

      const store = getStore()
      const result = await store.dispatch(asyncList())
      if (typeof result.payload === 'undefined') {
        Tip.error("可能由于网络问题，获取列表失败", 2300)
        return false
      }
      const res = store.getState().statement.statements
      this.list = res
      Session.set('index_load_cache', res)
      this.$apply()
    }

    computed = {
      showEmpty () {
        return this.list.length <= 0
      }
    }
  }
</script>
<style lang="scss" src="@/public/styles/index.scss"></style>
