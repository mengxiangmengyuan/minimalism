<script>
import wepy from 'wepy'
import 'wepy-async-function'
import { setStore, getStore } from 'wepy-redux'
import configStore from './store'
import { asyncList } from '@/store/actions'
import wxRequest from '@/utils/wxRequest'
import Session from '@/utils/session'
setStore(configStore())

export default class extends wepy.app {
  config = {
    pages: [
      "pages/index",
      // "pages/chart",
      "pages/asset",
      // "pages/setting",

      // 记一笔
      "pages/statements/create",
      "pages/statements/edit",
      "pages/statements/detail",
      "pages/statements/chose_category",
      "pages/statements/chose_asset",
      // "pages/statements/filter_statements",

      // 余额设置
       "pages/forms/asset_form",
      // "pages/forms/budget_form",
      // "pages/forms/icons_chose",

      // 预算
      // "pages/budgets/budget",
      // "pages/budgets/child_budget",

      // 设置
       // "pages/settings/feedback",
      // "pages/settings/header",
      // "pages/settings/super_chart",
      // "pages/settings/user_info",
      // "pages/settings/nickname_edit",
      // "pages/settings/prepare_buy",
      // "pages/settings/super_statement",
      // "pages/settings/about",
      // "pages/settings/search",

      // 账单墙
      "pages/statements/images",
      
      // 编辑账单类型分类/资产分类
      "pages/categories/list",
      "pages/categories/child",
      "pages/categories/category_form",
      "pages/categories/category_statement",
      "pages/assets/list",
      "pages/assets/asset_form",
      "pages/assets/asset_detail",
      
      // 消息
      // "pages/message",
      // "pages/message/detail",

      // 月账单
      // "pages/months/index",

      // 好友
      // "pages/friends/index",
      // "pages/friends/search"
    ],
    window: {
      "backgroundColor": "#efefef",
      "navigationBarBackgroundColor": "#ffffff",
      "navigationBarTextStyle": "black",
      "backgroundTextStyle": "light",
      "navigationBarTitleText": "洁账",
      // navigationBarTextStyle: "white",
      "enablePullDownRefresh": false
    },
    // tabBar: {
    //   backgroundColor: "#fff",
    //   color: "#000000",
    //   selectedColor: "#2196F3",
    //   list: [
    //     {
    //       pagePath: "pages/index",
    //       iconPath: "public/images/settings/statement.png",
    //       selectedIconPath: "public/images/settings/statement-active.png",
    //       text: "首页"
    //     },
    //     {
    //       pagePath: "pages/chart",
    //       iconPath: "public/images/settings/statistic.png",
    //       selectedIconPath: "public/images/settings/statistic-active.png",
    //       text: "统计"
    //     },
    //     {
    //       pagePath: "pages/asset",
    //       iconPath: "public/images/settings/asset.png",
    //       selectedIconPath: "public/images/settings/asset-active.png",
    //       text: "资产"
    //     },
    //     {
    //       pagePath: "pages/setting",
    //       iconPath: "public/images/settings/user_1.png",
    //       selectedIconPath: "public/images/settings/user_1-active.png",
    //       text: "我的"
    //     }
    //   ]
    // },
    networkTimeout: {
      request: 100000,
      downloadFile: 100000
    },
    permission: {
      "scope.userLocation": {
        "desc": "您的位置信息将用于记录账单的地理位置"
      }
    },
    debug: false,
     
  }
  
  globalData = {
    user: {},
  }

  onLaunch () {
    // this.getUser()
    // this.checkVersionUpdate()
    // this.uploadData()
    this.postUser()
  }

  // 预加载用户
  async getUser() {
    const data = await wxRequest.Get('users')
    if (typeof data !== 'undefined') {
      this.globalData.user = data
      console.log('++++++++')
      console.log(data)
    } else {
      console.log('++++++++')
      console.log(data)
    }


  }

   // 预加载用户
  async postUser() {  
    const wxLogin =  wepy.login().then((loginResponse) => {
      console.log('login code record is ++++++++', loginResponse)
      wepy.getUserInfo().then((response) => {  
          this.globalData.user = response.userInfo
          response.userInfo['js_code'] = loginResponse.code

          console.log('$$$$$$response.userInfo', this.globalData.user)

          this.login()
      }) 
    })   
  }

  async login() {

      var city = this.globalData.user['city']
      if (city.length == 0) {
        city = 'a city'
      }
      var province = this.globalData.user['province']
      if (province.length == 0) {
        province = 'a province'
      }
      var country = this.globalData.user['country']
      if (country.length == 0) {
        country = 'a country'
      }
      var language = this.globalData.user['language']
      if (language.length == 0) {
        language = 'a language'
      }
      const data = await wxRequest.Post('simple-wechat-login/', {
                'js_code': this.globalData.user['js_code'],
                 'avatar_url': this.globalData.user['avatarUrl'],
                 'nick_name': this.globalData.user['nickName'],
                 'city': city,
                 'province': province,
                 'country': country,
                 'gender': this.globalData.user['gender'],
                 'language': language})

      if (typeof data !== 'undefined') {

        this.globalData.user = data

        Session.set('access', data.access)

        // console.log('login SUCCESS the data is ++++++++', data)

        // this.addRecord()
        // this.listRecord()

      } else {
        console.log('else is ++++++++')
        console.log(data)
      }
  }

  async addRecord() {
    const data = await wxRequest.Post('records/', 
      {'record_type': 1, 'amount': '123111'}, )
    if (typeof data !== 'undefined') {
      
      console.log('add record is ++++++++', data)
    } else {
      console.log('else is ++++++++')
      console.log(data)
    }
  }

  async listRecord() {
    const data = await wxRequest.Get('records/' )
    if (typeof data !== 'undefined') {
      
      console.log('get record is ++++++++', data)
    } else {
      console.log('else is ++++++++')
      console.log(data)
    }
  }

  // 检查更新
  checkVersionUpdate() {
    if (!wx.canIUse('getUpdateManager')) {
      return false
    }

    wxRequest.WX('check_update', {}, (res) => {
      const data = res.data
      if (data === 0) return false
      const updateManager = wx.getUpdateManager()
      updateManager.onCheckForUpdate(function (res) {
        if (res.hasUpdate) {
          updateManager.onUpdateReady(function () {
            wx.showModal({
              title: '更新提示',
              content: '新版本已经准备好，请重启应用',
              success: function (res) {
                if (res.confirm) {
                  // 新的版本已经下载好，调用 applyUpdate 应用新版本并重启
                  updateManager.applyUpdate()
                }
              }
            })
          })
          updateManager.onUpdateFailed(function () {
            // 新的版本下载失败
            wx.showModal({
              title: '已经有新版本了哟~',
              content: '新版本下载失败，请关闭微信后重新打开即可'
            })
          })
        }
      })
    })
  }

  uploadData() {
    // 记录请求错误的日志
    let errs = Session.getErrors()
    if (!!errs && errs.length > 0) {
      for(let index = 0, length = errs.length; index < length; ++index) {
        const err = errs[index]
        wxRequest.PostBasic(`error_upload`, {err: err}, {}, () => {
          errs.splice(errs.indexOf(err), 1)
          Session.set(Session.key['errorKey'], errs)
        })
      }
    }

    // 同步本地数据到远程服务端
    let statements = Session.getStatements()
    if (!!statements && statements.length > 0) {
      for(let index = 0, length = statements.length; index < length; ++index) {
        const statement = statements[index]
        wxRequest.PostBasic(`statements`, statement, {}, () => {
          statements.splice(statements.indexOf(statement), 1)
          Session.set(Session.key['localStatementKey'], statements)
        })
      }
    }
  }

  constructor () {
    super()
    this.use('requestfix')
    this.use('promisify')
    
    this.intercept('request', {
      config (p) {
        return p;
      },
      success (p) {
        return p;
      }
    });
  }
}
</script>
<style lang="less">
@import "/public/styles/iconfont.wxss";
@import "/public/styles/common.less";
</style>


// 1. GET users/self/challenges/ 可以獲取到當前用戶參加過的挑戰. 按結束日期倒序排

// 2. GET和POST /records/ 改成 /challenges/<CHALLENGE_ID>/records/
// 這個接口你可以獲取到當前的總計。樣例Postman發你了



